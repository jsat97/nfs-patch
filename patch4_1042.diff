If MDS is not available for sometime during start of DS, DS doesn't register with the MDS, and
does not contact it even after MDS is online.

Bug# 1042
Signed-off-by:jai_97@rediffmail.com
--------------------------------------------------
diff -r 81aaf3611496 usr/src/uts/common/fs/nfs/dserv_mds.c
--- a/usr/src/uts/common/fs/nfs/dserv_mds.c	Wed Apr 06 03:42:20 2011 +0400
+++ b/usr/src/uts/common/fs/nfs/dserv_mds.c	Mon Jun 06 22:21:09 2011 +0530
@@ -879,7 +879,7 @@ out:
 void
 dserv_mds_heartbeat_thread(pid_t *pid)
 {
-	int 			error = 0;
+	int 			error = 0, first_entry = 1;
 	DS_RENEWargs 		args;
 	DS_RENEWres  		res;
 	dserv_mds_instance_t	*inst = NULL;
@@ -936,10 +936,53 @@ dserv_mds_heartbeat_thread(pid_t *pid)
 			dserv_instance_exit(inst);
 			break;
 		}
+		mutex_exit(&inst->dmi_content_lock);
 
-		args.ds_id = inst->dmi_ds_id;
-		args.ds_boottime = inst->dmi_verifier;
-		mutex_exit(&inst->dmi_content_lock);
+		/*
+ 		 * there are 2 cases when we must call exibi/reportavail -
+		 * 1. first time we enter the thread -since we haven't called exibi/reportavail before creating the thread
+		 * 2. if we're recovering from a MDS reboot
+		 */
+		mutex_enter(&inst->dmi_content_lock);
+		if (first_entry || inst->dmi_recov_in_progress == B_TRUE) {
+			mutex_exit(&inst->dmi_content_lock);
+			error = dserv_mds_exibi(inst, &status);
+			if (error || status != DS_OK) {
+				DTRACE_PROBE(dserv__i__exibi_failed);
+				dserv_instance_exit(inst);
+				continue;
+			}
+
+			mutex_enter(&inst->dmi_content_lock);
+			args.ds_id = inst->dmi_ds_id;
+			args.ds_boottime = inst->dmi_verifier;
+			mutex_exit(&inst->dmi_content_lock);
+
+			/* DS_EXIBI is done, now do DS_REPORTAVAIL. */
+			error = dserv_mds_do_reportavail(inst, &status);
+			if (error || status != DS_OK) {
+				DTRACE_PROBE(
+				    dserv__i__reportavail_failed);
+				dserv_instance_exit(inst);
+				continue;
+			}
+			first_entry = 0;
+
+			/*
+			 * Recovery is done. Mark all the
+			 * appropriate flags so that we are
+			 * ready for the next round of recovery
+			 * actions.
+			 */
+
+			mutex_enter(&inst->dmi_content_lock);
+			if (inst->dmi_recov_in_progress == B_TRUE) {
+				inst->dmi_recov_in_progress = B_FALSE;
+			}
+			mutex_exit(&inst->dmi_content_lock);
+		} else {
+			mutex_exit(&inst->dmi_content_lock);
+		}
 
 		/*
 		 * Invoke DS_RENEW to the MDS
@@ -975,32 +1018,6 @@ dserv_mds_heartbeat_thread(pid_t *pid)
 				 */
 				inst->dmi_recov_in_progress = B_TRUE;
 				mutex_exit(&inst->dmi_content_lock);
-
-				error = dserv_mds_exibi(inst, &status);
-				if (error || status != DS_OK) {
-					DTRACE_PROBE(dserv__i__exibi_failed);
-					dserv_instance_exit(inst);
-					continue;
-				}
-
-				/* DS_EXIBI is done, now do DS_REPORTAVAIL. */
-				error = dserv_mds_do_reportavail(inst, &status);
-				if (error || status != DS_OK) {
-					DTRACE_PROBE(
-					    dserv__i__reportavail_failed);
-					dserv_instance_exit(inst);
-					continue;
-				} else {
-					/*
-					 * Recovery is done. Mark all the
-					 * appropriate flags so that we are
-					 * ready for the next round of recovery
-					 * actions.
-					 */
-					mutex_enter(&inst->dmi_content_lock);
-					inst->dmi_recov_in_progress = B_FALSE;
-					mutex_exit(&inst->dmi_content_lock);
-				}
 			} else {
 				DTRACE_PROBE(dserv__i__dserv_no_recovery);
 				mutex_exit(&inst->dmi_content_lock);
@@ -1044,8 +1061,6 @@ dserv_mds_addport(const char *uaddr, con
 	inst->dmi_name = dserv_strdup(in);
 	mutex_exit(&inst->dmi_content_lock);
 
-	error = dserv_mds_exibi(inst, &status);
-
 	dserv_instance_exit(inst);
 	return (error);
 }
@@ -1246,30 +1261,20 @@ dserv_mds_reportavail()
 	dserv_mds_instance_t *inst = NULL;
 	int error = 0;
 	pid_t *pid = NULL;
-	ds_status status = 0;
 
 	error = dserv_instance_enter(RW_READER, B_FALSE, &inst, NULL);
 	if (error) {
 		return (error);
 	}
 
-	error = dserv_mds_do_reportavail(inst, &status);
-
 	/*
-	 * If the first DS_REPORTAVAIL (and the previous  DS_EXIBI)
-	 * completes successfully, start a heartbeat thread from the DS
+	 * start a heartbeat thread from the DS
 	 * to the MDS. Using the heartbeat thread, the DS will detect
 	 * MDS reboot and the MDS will detect DS reboot. DS_RENEW is
 	 * the control protocol operation that gets invoked in the
 	 * heartbeat thread.
 	 *
-	 * There are two reasons for starting the heartbeat
-	 * thread here:
-	 *
-	 * 1. No point starting the heartbeat if the initial set of
-	 * exchanges between the DS and MDS return in an error.
-	 *
-	 * 2. We could start the heartbeat thread in the user space,
+	 * We could start the heartbeat thread in the user space,
 	 * and issue a system call for doing DS_RENEW, but that would
 	 * be inefficient, since the DS_RENEW is a frequently executed
 	 * operation.
@@ -1280,7 +1285,7 @@ dserv_mds_reportavail()
 	 * instances can be serving a different pNFS communities and/or
 	 * datasets.
 	 */
-	if (error == 0 && status == DS_OK) {
+	if (error == 0 ) {
 		DTRACE_PROBE1(dserv__i__dmi_pid, int, inst->dmi_pid);
 		pid = kmem_zalloc(sizeof (pid_t), KM_NOSLEEP);
 		mutex_enter(&inst->dmi_content_lock);
